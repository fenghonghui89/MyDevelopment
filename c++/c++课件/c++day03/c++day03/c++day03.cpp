一.类的实现
1.1使用结构体 描述类
   成员的访问权限 默认是公开的
1.2使用class 描述类
   成员的访问权限 默认是私有的
   private  只能在类内访问

   protected  保护
   在类内 或者 在子类中

   public    公开
   在类内  类外  子类 都可以访问
二. 构造函数
   2.1 构造函数 是一种特殊的函数
       和类型名相同  没有返回值类型  参数没有限制
       创建对象时只调用一次
   2.2 目的
       完成对成员的赋值或者初始化
       当然构造函数 可以做任何事情
   2.3 系统会自动提供一个默认的 无参的构造函数
       但一旦人为提供构造函数 则系统提供的会自动
       消失。我们可以提供 多个构造函数 但是一般
       采用参数的默认值 简化构造函数的个数.
三. 一个对象的创建过程
    3.1 分配内存空间
    3.2 处理成员变量
        如果成员变量是基本类型 不做任何操作
        如果成员变量是类类型  则创建对象
    3.3 调用构造函数
四.构造函数的应用
    4.1  构造函数  和 普通的函数一样 可以传任意个
         参数这样可以构成重载
    4.2  尽量使用 参数的默认值 减少构造函数的个数
    4.3  构造函数的初始化参数列表
         可以在构造函数函数调用之前执行
         const 类型的变量  或者引用类型的变量
         必须使用初始化参数列表。
         位置是在 参数列表之后  函数实现体之前
         加一个冒号 
    4.4  在实际开发中  头文件 和 实现文件
         是要分开的。
         参数的默认值 只能在头文件中指定
         mytime.h
         mytime.cpp
         4.4.1 编写头文件
         防止头文件重复包含
         #ifndef   #define #endif
         类的定义  成员变量的定义
         函数的声明
         4.4.2 编写实现文件
         引入头文件  #include  "***.h"
         把所有的函数声明 拷贝过来
         在函数名前 加 类名::
         写出函数的实现
         4.4.3  写测试文件
    4.5  写一个日期类
         特征
         int  year;
         int  month;
         int  day;
         功能:
         提供构造函数  带三个参数的默认值
         显示日期

         写一个测试文件 测试日期
         构造函数中设置日期 调用显示日期的函数
五.  this 指针
     5.1 是一个指向当前对象的指针
         类似于oc中的 self
         构造函数中 this代表正在被构建的对象的地址
         用在成员函数中 谁调用这个成员函数 则this
         指向哪个对象的地址。
     5.2 应用
         参数的名字 和 属性的名字重名时
         用在函数的返回值中
         用在函数的参数中
六.  const 对象 和  const 成员函数
     6.1 const 对象只能调用 const 函数
         非const 对象 即可调用const函数 又
         可以调用非const 函数
         但优先选择 非const 函数
     6.2 const 函数 和 非const 函数可以构成
         重载。
     6.3 const 函数 只能访问const 成员
         要访问普通的成员变量 需要在成员变量
         前加 mutable

七.  析构函数
     7.1 语法
     函数的名字 和 类名相同 在函数名前加 ~
     析构函数没有任何参数  一个类只有一个析构函数
     会在对象销毁前调用。
     析构函数 一般是系统自动调用 但可以人为调用
     7.2 作用
     完成对资源的清理工作   一般 用来释放资源
     系统 会自动提供一个析构函数
     7.3 什么时候 需要 自定义析构函数
     自己来释放资源  一般是堆内存的释放 
 八 . 在堆中构建对象 和 释放
     8.1 c中的malloc 和 c++ new 的区别?
        new 比 malloc 多做了三件事
        如果构建的对象中的成员是类类型 则new
        会自动构建这个成员
        new 会自动调用 构造函数
        new 会自动做类型转换
     8.2 delete  和 free 区别
        delete 对象之前 会调用析构函数
        而free不会 
 九. 拷贝构造函数
     9.1 概念
     使用同类型的一个对象 去构建另外一个对象时
     会调用拷贝构造函数。
     类型(const 类型&   a){

     }
     9.2 拷贝构造函数的调用时机
     用同类型对象生成对象
     给非引用类型的函数参数 传参时
     在函数中返回 非引用类型的返回值时
     9.3 什么时候 需要自定义拷贝构造函数
     当类中 有指针类型的成员  或者引用类型
     成员时。
     数据独立性问题。
十. 构造函数 负责分配指针成员的内存
    析构函数 负责释放指针对应的内存
    拷贝构造  防止两个对象共享一块内存
    赋值运算符
十一.静态成员
    静态成员变量   静态成员函数
    static  修饰即可
    静态成员变量 必须在类外初始化
    成员变量类型  类名:: 成员变量名;
    成员变量类型  类名:: 成员变量名=值;

    静态函数只能直接访问静态成员
    静态函数 也是只要通过类型就能访问

    希望程序中的一个对象 是单例的
    结合访问权限
    结合静态成员变量 和 静态成员函数
    结合引用




